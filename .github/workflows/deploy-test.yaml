name: Deploy testing environment

on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Extract pull request ref
        run: echo "headref=$GITHUB_HEAD_REF" >> $GITHUB_OUTPUT
        id: headref
      - name: Post comment
        uses: actions/github-script@v6
        env:
          GITHUB_HEAD_REF: '${{steps.headref.outputs.headref}}'
        with:
          script: |
            if (context.payload.action === "opened")
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: "Due to Firebase's lack of support for *deploy previews*, only one codebase can be loaded at a time in the testing environment. To bring this commit back into the testing environment, please run ```gh workflow run deploy-test --ref " + process.env.GITHUB_HEAD_REF + "```",
              });
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: 8
          run_install: false
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        run: pnpm install
      - name: Install firebase-tools
        run: pnpm i -g firebase-tools
      - name: Switch firebase project to test
        run: firebase use test --token "${{ secrets.FIREBASE_TOKEN }}"
      - name: Deploy to firebase
        run: firebase deploy --token "${{ secrets.FIREBASE_TOKEN }}"
